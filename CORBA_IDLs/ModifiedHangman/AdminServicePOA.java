package ModifiedHangman;


/**
* ModifiedHangman/AdminServicePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ModifiedHangman/AdminService.idl
* Thursday, May 15, 2025 10:54:58 PM SGT
*/

public abstract class AdminServicePOA extends org.omg.PortableServer.Servant
 implements ModifiedHangman.AdminServiceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("create_player", new java.lang.Integer (0));
    _methods.put ("update_player", new java.lang.Integer (1));
    _methods.put ("delete_player", new java.lang.Integer (2));
    _methods.put ("search_player", new java.lang.Integer (3));
    _methods.put ("get_all_player", new java.lang.Integer (4));
    _methods.put ("set_waiting_time", new java.lang.Integer (5));
    _methods.put ("set_round_duration", new java.lang.Integer (6));
    _methods.put ("get_waiting_time", new java.lang.Integer (7));
    _methods.put ("get_round_duration", new java.lang.Integer (8));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // ModifiedHangman/AdminService/create_player
       {
         try {
           String username = in.read_string ();
           String password = in.read_string ();
           String token = in.read_string ();
           this.create_player (username, password, token);
           out = $rh.createReply();
         } catch (ModifiedHangman.AdminNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.AdminNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // ModifiedHangman/AdminService/update_player
       {
         try {
           String username = in.read_string ();
           String new_password = in.read_string ();
           String token = in.read_string ();
           this.update_player (username, new_password, token);
           out = $rh.createReply();
         } catch (ModifiedHangman.AdminNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.AdminNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // ModifiedHangman/AdminService/delete_player
       {
         try {
           String username = in.read_string ();
           String token = in.read_string ();
           this.delete_player (username, token);
           out = $rh.createReply();
         } catch (ModifiedHangman.AdminNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.AdminNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // ModifiedHangman/AdminService/search_player
       {
         try {
           String keyword = in.read_string ();
           String token = in.read_string ();
           ModifiedHangman.Player $result = null;
           $result = this.search_player (keyword, token);
           out = $rh.createReply();
           ModifiedHangman.PlayerHelper.write (out, $result);
         } catch (ModifiedHangman.AdminNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.AdminNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // ModifiedHangman/AdminService/get_all_player
       {
         try {
           String token = in.read_string ();
           ModifiedHangman.Player $result[] = null;
           $result = this.get_all_player (token);
           out = $rh.createReply();
           ModifiedHangman.PlayerListHelper.write (out, $result);
         } catch (ModifiedHangman.AdminNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.AdminNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // ModifiedHangman/AdminService/set_waiting_time
       {
         try {
           int seconds = in.read_long ();
           String token = in.read_string ();
           this.set_waiting_time (seconds, token);
           out = $rh.createReply();
         } catch (ModifiedHangman.AdminNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.AdminNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 6:  // ModifiedHangman/AdminService/set_round_duration
       {
         try {
           int seconds = in.read_long ();
           String token = in.read_string ();
           this.set_round_duration (seconds, token);
           out = $rh.createReply();
         } catch (ModifiedHangman.AdminNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.AdminNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 7:  // ModifiedHangman/AdminService/get_waiting_time
       {
         try {
           String token = in.read_string ();
           int $result = (int)0;
           $result = this.get_waiting_time (token);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (ModifiedHangman.AdminNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.AdminNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 8:  // ModifiedHangman/AdminService/get_round_duration
       {
         try {
           String token = in.read_string ();
           int $result = (int)0;
           $result = this.get_round_duration (token);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (ModifiedHangman.AdminNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.AdminNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ModifiedHangman/AdminService:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public AdminService _this() 
  {
    return AdminServiceHelper.narrow(
    super._this_object());
  }

  public AdminService _this(org.omg.CORBA.ORB orb) 
  {
    return AdminServiceHelper.narrow(
    super._this_object(orb));
  }


} // class AdminServicePOA
