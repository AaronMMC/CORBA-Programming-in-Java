package ModifiedHangman;


/**
* ModifiedHangman/GameServicePOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from ModifiedHangman/GameService.idl
* Friday, May 16, 2025 12:00:04 AM SGT
*/

public abstract class GameServicePOA extends org.omg.PortableServer.Servant
 implements ModifiedHangman.GameServiceOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("registerCallback", new java.lang.Integer (0));
    _methods.put ("getPlayerByUsername", new java.lang.Integer (1));
    _methods.put ("start_game", new java.lang.Integer (2));
    _methods.put ("guessLetter", new java.lang.Integer (3));
    _methods.put ("get_leaderboard", new java.lang.Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // ModifiedHangman/GameService/registerCallback
       {
         try {
           ModifiedHangman.ClientCallback callback = ModifiedHangman.ClientCallbackHelper.read (in);
           String token = in.read_string ();
           this.registerCallback (callback, token);
           out = $rh.createReply();
         } catch (ModifiedHangman.PlayerNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.PlayerNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // ModifiedHangman/GameService/getPlayerByUsername
       {
         try {
           String username = in.read_string ();
           String token = in.read_string ();
           ModifiedHangman.Player $result = null;
           $result = this.getPlayerByUsername (username, token);
           out = $rh.createReply();
           ModifiedHangman.PlayerHelper.write (out, $result);
         } catch (ModifiedHangman.PlayerNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.PlayerNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // ModifiedHangman/GameService/start_game
       {
         try {
           String username = in.read_string ();
           String token = in.read_string ();
           ModifiedHangman.GameInfo $result = null;
           $result = this.start_game (username, token);
           out = $rh.createReply();
           ModifiedHangman.GameInfoHelper.write (out, $result);
         } catch (ModifiedHangman.PlayerNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.PlayerNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // ModifiedHangman/GameService/guessLetter
       {
         try {
           String username = in.read_string ();
           String gameId = in.read_string ();
           char letter = in.read_char ();
           String token = in.read_string ();
           ModifiedHangman.GuessResponse $result = null;
           $result = this.guessLetter (username, gameId, letter, token);
           out = $rh.createReply();
           ModifiedHangman.GuessResponseHelper.write (out, $result);
         } catch (ModifiedHangman.GameNotFoundException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.GameNotFoundExceptionHelper.write (out, $ex);
         } catch (ModifiedHangman.PlayerNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.PlayerNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 4:  // ModifiedHangman/GameService/get_leaderboard
       {
         try {
           String token = in.read_string ();
           ModifiedHangman.Leaderboard $result = null;
           $result = this.get_leaderboard (token);
           out = $rh.createReply();
           ModifiedHangman.LeaderboardHelper.write (out, $result);
         } catch (ModifiedHangman.PlayerNotLoggedInException $ex) {
           out = $rh.createExceptionReply ();
           ModifiedHangman.PlayerNotLoggedInExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:ModifiedHangman/GameService:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public GameService _this() 
  {
    return GameServiceHelper.narrow(
    super._this_object());
  }

  public GameService _this(org.omg.CORBA.ORB orb) 
  {
    return GameServiceHelper.narrow(
    super._this_object(orb));
  }


} // class GameServicePOA
